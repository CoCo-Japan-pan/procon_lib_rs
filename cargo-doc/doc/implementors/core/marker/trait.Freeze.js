(function() {var implementors = {
"dual_segtree":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"dual_segtree/struct.DualSegTree.html\" title=\"struct dual_segtree::DualSegTree\">DualSegTree</a>&lt;T&gt;",1,["dual_segtree::DualSegTree"]]],
"dynamic_modint":[["impl&lt;MOD&gt; Freeze for <a class=\"struct\" href=\"dynamic_modint/struct.DynamicModInt.html\" title=\"struct dynamic_modint::DynamicModInt\">DynamicModInt</a>&lt;MOD&gt;",1,["dynamic_modint::DynamicModInt"]]],
"fenwick_tree":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"fenwick_tree/struct.FenwickTree.html\" title=\"struct fenwick_tree::FenwickTree\">FenwickTree</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["fenwick_tree::FenwickTree"]]],
"hld":[["impl Freeze for <a class=\"struct\" href=\"hld/struct.HLD.html\" title=\"struct hld::HLD\">HLD</a>",1,["hld::HLD"]],["impl Freeze for <a class=\"enum\" href=\"hld/enum.Path.html\" title=\"enum hld::Path\">Path</a>",1,["hld::Path"]]],
"lazy_segtree":[["impl&lt;F&gt; Freeze for <a class=\"struct\" href=\"lazy_segtree/struct.LazySegTree.html\" title=\"struct lazy_segtree::LazySegTree\">LazySegTree</a>&lt;F&gt;",1,["lazy_segtree::LazySegTree"]]],
"matrix":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"matrix/struct.Matrix.html\" title=\"struct matrix::Matrix\">Matrix</a>&lt;T&gt;",1,["matrix::Matrix"]]],
"maxflow":[["impl&lt;Cap&gt; Freeze for <a class=\"struct\" href=\"maxflow/struct.Edge.html\" title=\"struct maxflow::Edge\">Edge</a>&lt;Cap&gt;<span class=\"where fmt-newline\">where\n    Cap: Freeze,</span>",1,["maxflow::Edge"]],["impl&lt;Cap&gt; Freeze for <a class=\"struct\" href=\"maxflow/struct.MaxFlow.html\" title=\"struct maxflow::MaxFlow\">MaxFlow</a>&lt;Cap&gt;",1,["maxflow::MaxFlow"]]],
"maxflow_lower_bound":[["impl&lt;Cap&gt; Freeze for <a class=\"struct\" href=\"maxflow_lower_bound/struct.MaxFlowLowerBound.html\" title=\"struct maxflow_lower_bound::MaxFlowLowerBound\">MaxFlowLowerBound</a>&lt;Cap&gt;<span class=\"where fmt-newline\">where\n    Cap: Freeze,</span>",1,["maxflow_lower_bound::MaxFlowLowerBound"]]],
"mo":[["impl Freeze for <a class=\"struct\" href=\"mo/struct.MoRunner.html\" title=\"struct mo::MoRunner\">MoRunner</a>",1,["mo::MoRunner"]]],
"modint_mersenne":[["impl Freeze for <a class=\"struct\" href=\"modint_mersenne/struct.ModIntMersenne.html\" title=\"struct modint_mersenne::ModIntMersenne\">ModIntMersenne</a>",1,["modint_mersenne::ModIntMersenne"]]],
"potentialized_union_find":[["impl&lt;M&gt; !Freeze for <a class=\"struct\" href=\"potentialized_union_find/struct.PotentializedUnionFind.html\" title=\"struct potentialized_union_find::PotentializedUnionFind\">PotentializedUnionFind</a>&lt;M&gt;",1,["potentialized_union_find::PotentializedUnionFind"]]],
"raq_rsq":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"raq_rsq/struct.RAQRSQ.html\" title=\"struct raq_rsq::RAQRSQ\">RAQRSQ</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["raq_rsq::RAQRSQ"]]],
"rerooting":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"rerooting/struct.Rerooting.html\" title=\"struct rerooting::Rerooting\">Rerooting</a>&lt;T&gt;",1,["rerooting::Rerooting"]]],
"rolling_hash":[["impl Freeze for <a class=\"struct\" href=\"rolling_hash/struct.RollingHash.html\" title=\"struct rolling_hash::RollingHash\">RollingHash</a>",1,["rolling_hash::RollingHash"]]],
"segtree":[["impl&lt;M&gt; Freeze for <a class=\"struct\" href=\"segtree/struct.SegTree.html\" title=\"struct segtree::SegTree\">SegTree</a>&lt;M&gt;",1,["segtree::SegTree"]]],
"segtree_2d":[["impl&lt;M&gt; Freeze for <a class=\"struct\" href=\"segtree_2d/struct.SegTree2D.html\" title=\"struct segtree_2d::SegTree2D\">SegTree2D</a>&lt;M&gt;",1,["segtree_2d::SegTree2D"]]],
"segtree_2d_compressed":[["impl&lt;M, T&gt; Freeze for <a class=\"struct\" href=\"segtree_2d_compressed/struct.SegTree2DCompressed.html\" title=\"struct segtree_2d_compressed::SegTree2DCompressed\">SegTree2DCompressed</a>&lt;M, T&gt;",1,["segtree_2d_compressed::SegTree2DCompressed"]]],
"sparse_table":[["impl&lt;M&gt; Freeze for <a class=\"struct\" href=\"sparse_table/struct.SparseTable.html\" title=\"struct sparse_table::SparseTable\">SparseTable</a>&lt;M&gt;",1,["sparse_table::SparseTable"]]],
"sparse_table_on_segtree":[["impl&lt;M&gt; Freeze for <a class=\"struct\" href=\"sparse_table_on_segtree/struct.SparseTableOnSegTree.html\" title=\"struct sparse_table_on_segtree::SparseTableOnSegTree\">SparseTableOnSegTree</a>&lt;M&gt;",1,["sparse_table_on_segtree::SparseTableOnSegTree"]]],
"static_modint":[["impl&lt;const MOD: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.70.0/std/primitive.u32.html\">u32</a>&gt; Freeze for <a class=\"struct\" href=\"static_modint/struct.StaticModInt.html\" title=\"struct static_modint::StaticModInt\">StaticModInt</a>&lt;MOD&gt;",1,["static_modint::StaticModInt"]]],
"top2":[["impl&lt;K, V&gt; Freeze for <a class=\"struct\" href=\"top2/struct.Top2Map.html\" title=\"struct top2::Top2Map\">Top2Map</a>&lt;K, V&gt;<span class=\"where fmt-newline\">where\n    K: Freeze,\n    V: Freeze,</span>",1,["top2::Top2Map"]]],
"union_find":[["impl !Freeze for <a class=\"struct\" href=\"union_find/struct.UnionFind.html\" title=\"struct union_find::UnionFind\">UnionFind</a>",1,["union_find::UnionFind"]]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()