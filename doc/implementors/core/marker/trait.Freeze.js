(function() {var implementors = {
"auxiliary_tree":[["impl Freeze for <a class=\"struct\" href=\"auxiliary_tree/struct.AuxiliaryTree.html\" title=\"struct auxiliary_tree::AuxiliaryTree\">AuxiliaryTree</a>",1,["auxiliary_tree::AuxiliaryTree"]]],
"avl":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"avl/struct.AVL.html\" title=\"struct avl::AVL\">AVL</a>&lt;T&gt;",1,["avl::AVL"]],["impl&lt;'a, T&gt; Freeze for <a class=\"struct\" href=\"avl/struct.Iter.html\" title=\"struct avl::Iter\">Iter</a>&lt;'a, T&gt;",1,["avl::Iter"]]],
"binom":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"binom/struct.Binom.html\" title=\"struct binom::Binom\">Binom</a>&lt;T&gt;",1,["binom::Binom"]]],
"bit_matrix":[["impl Freeze for <a class=\"struct\" href=\"bit_matrix/struct.BitMatrix.html\" title=\"struct bit_matrix::BitMatrix\">BitMatrix</a>",1,["bit_matrix::BitMatrix"]]],
"bitdict":[["impl Freeze for <a class=\"struct\" href=\"bitdict/struct.BitDict.html\" title=\"struct bitdict::BitDict\">BitDict</a>",1,["bitdict::BitDict"]]],
"bitset":[["impl Freeze for <a class=\"struct\" href=\"bitset/struct.BitSet.html\" title=\"struct bitset::BitSet\">BitSet</a>",1,["bitset::BitSet"]]],
"centroid_decomposition":[["impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"centroid_decomposition/struct.CentroidDecomposition.html\" title=\"struct centroid_decomposition::CentroidDecomposition\">CentroidDecomposition</a>&lt;'a&gt;",1,["centroid_decomposition::CentroidDecomposition"]]],
"cht_offline":[["impl Freeze for <a class=\"enum\" href=\"cht_offline/enum.MaxCompare.html\" title=\"enum cht_offline::MaxCompare\">MaxCompare</a>",1,["cht_offline::MaxCompare"]],["impl Freeze for <a class=\"enum\" href=\"cht_offline/enum.MinCompare.html\" title=\"enum cht_offline::MinCompare\">MinCompare</a>",1,["cht_offline::MinCompare"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"cht_offline/struct.CHTOffline.html\" title=\"struct cht_offline::CHTOffline\">CHTOffline</a>&lt;T&gt;",1,["cht_offline::CHTOffline"]]],
"dual_segtree":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"dual_segtree/struct.DualSegTree.html\" title=\"struct dual_segtree::DualSegTree\">DualSegTree</a>&lt;T&gt;",1,["dual_segtree::DualSegTree"]]],
"dynamic_modint":[["impl&lt;MOD&gt; Freeze for <a class=\"struct\" href=\"dynamic_modint/struct.DynamicModInt.html\" title=\"struct dynamic_modint::DynamicModInt\">DynamicModInt</a>&lt;MOD&gt;",1,["dynamic_modint::DynamicModInt"]]],
"eratosthenes":[["impl Freeze for <a class=\"struct\" href=\"eratosthenes/struct.Eratosthenes.html\" title=\"struct eratosthenes::Eratosthenes\">Eratosthenes</a>",1,["eratosthenes::Eratosthenes"]]],
"euler_tour":[["impl Freeze for <a class=\"struct\" href=\"euler_tour/struct.MinMonoid.html\" title=\"struct euler_tour::MinMonoid\">MinMonoid</a>",1,["euler_tour::MinMonoid"]],["impl Freeze for <a class=\"struct\" href=\"euler_tour/struct.EulerTour.html\" title=\"struct euler_tour::EulerTour\">EulerTour</a>",1,["euler_tour::EulerTour"]]],
"fenwick_tree":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"fenwick_tree/struct.FenwickTree.html\" title=\"struct fenwick_tree::FenwickTree\">FenwickTree</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["fenwick_tree::FenwickTree"]]],
"fps_utils":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"fps_utils/struct.Fps.html\" title=\"struct fps_utils::Fps\">Fps</a>&lt;T&gt;",1,["fps_utils::Fps"]]],
"geometry_basics":[["impl Freeze for <a class=\"struct\" href=\"geometry_basics/struct.Point.html\" title=\"struct geometry_basics::Point\">Point</a>",1,["geometry_basics::Point"]]],
"hld":[["impl Freeze for <a class=\"struct\" href=\"hld/struct.HLD.html\" title=\"struct hld::HLD\">HLD</a>",1,["hld::HLD"]],["impl Freeze for <a class=\"enum\" href=\"hld/enum.Path.html\" title=\"enum hld::Path\">Path</a>",1,["hld::Path"]]],
"lazy_segtree":[["impl&lt;F&gt; Freeze for <a class=\"struct\" href=\"lazy_segtree/struct.LazySegTree.html\" title=\"struct lazy_segtree::LazySegTree\">LazySegTree</a>&lt;F&gt;",1,["lazy_segtree::LazySegTree"]]],
"lazy_segtree_beats":[["impl&lt;Node&gt; Freeze for <a class=\"struct\" href=\"lazy_segtree_beats/struct.LazySegtreeBeats.html\" title=\"struct lazy_segtree_beats::LazySegtreeBeats\">LazySegtreeBeats</a>&lt;Node&gt;",1,["lazy_segtree_beats::LazySegtreeBeats"]]],
"lazy_segtree_utils":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"lazy_segtree_utils/inner_types/struct.MaxMonoid.html\" title=\"struct lazy_segtree_utils::inner_types::MaxMonoid\">MaxMonoid</a>&lt;T&gt;",1,["lazy_segtree_utils::inner_types::MaxMonoid"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"lazy_segtree_utils/inner_types/struct.MinMonoid.html\" title=\"struct lazy_segtree_utils::inner_types::MinMonoid\">MinMonoid</a>&lt;T&gt;",1,["lazy_segtree_utils::inner_types::MinMonoid"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"lazy_segtree_utils/inner_types/struct.SumMonoid.html\" title=\"struct lazy_segtree_utils::inner_types::SumMonoid\">SumMonoid</a>&lt;T&gt;",1,["lazy_segtree_utils::inner_types::SumMonoid"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"lazy_segtree_utils/inner_types/struct.AddAction.html\" title=\"struct lazy_segtree_utils::inner_types::AddAction\">AddAction</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["lazy_segtree_utils::inner_types::AddAction"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"lazy_segtree_utils/inner_types/struct.AddActionSum.html\" title=\"struct lazy_segtree_utils::inner_types::AddActionSum\">AddActionSum</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["lazy_segtree_utils::inner_types::AddActionSum"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"lazy_segtree_utils/inner_types/struct.UpdateAction.html\" title=\"struct lazy_segtree_utils::inner_types::UpdateAction\">UpdateAction</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["lazy_segtree_utils::inner_types::UpdateAction"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"lazy_segtree_utils/inner_types/struct.UpdateActionSum.html\" title=\"struct lazy_segtree_utils::inner_types::UpdateActionSum\">UpdateActionSum</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["lazy_segtree_utils::inner_types::UpdateActionSum"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"lazy_segtree_utils/inner_types/struct.AddMax.html\" title=\"struct lazy_segtree_utils::inner_types::AddMax\">AddMax</a>&lt;T&gt;",1,["lazy_segtree_utils::inner_types::AddMax"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"lazy_segtree_utils/inner_types/struct.AddMin.html\" title=\"struct lazy_segtree_utils::inner_types::AddMin\">AddMin</a>&lt;T&gt;",1,["lazy_segtree_utils::inner_types::AddMin"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"lazy_segtree_utils/inner_types/struct.AddSum.html\" title=\"struct lazy_segtree_utils::inner_types::AddSum\">AddSum</a>&lt;T&gt;",1,["lazy_segtree_utils::inner_types::AddSum"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"lazy_segtree_utils/inner_types/struct.UpdateMax.html\" title=\"struct lazy_segtree_utils::inner_types::UpdateMax\">UpdateMax</a>&lt;T&gt;",1,["lazy_segtree_utils::inner_types::UpdateMax"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"lazy_segtree_utils/inner_types/struct.UpdateMin.html\" title=\"struct lazy_segtree_utils::inner_types::UpdateMin\">UpdateMin</a>&lt;T&gt;",1,["lazy_segtree_utils::inner_types::UpdateMin"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"lazy_segtree_utils/inner_types/struct.UpdateSum.html\" title=\"struct lazy_segtree_utils::inner_types::UpdateSum\">UpdateSum</a>&lt;T&gt;",1,["lazy_segtree_utils::inner_types::UpdateSum"]]],
"lowlink":[["impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"lowlink/struct.LowLink.html\" title=\"struct lowlink::LowLink\">LowLink</a>&lt;'a&gt;",1,["lowlink::LowLink"]]],
"matrix":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"matrix/struct.UsualSemiring.html\" title=\"struct matrix::UsualSemiring\">UsualSemiring</a>&lt;T&gt;",1,["matrix::UsualSemiring"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"matrix/struct.Matrix.html\" title=\"struct matrix::Matrix\">Matrix</a>&lt;T&gt;",1,["matrix::Matrix"]]],
"maxflow":[["impl&lt;Cap&gt; Freeze for <a class=\"struct\" href=\"maxflow/struct.Edge.html\" title=\"struct maxflow::Edge\">Edge</a>&lt;Cap&gt;<span class=\"where fmt-newline\">where\n    Cap: Freeze,</span>",1,["maxflow::Edge"]],["impl&lt;Cap&gt; Freeze for <a class=\"struct\" href=\"maxflow/struct.MaxFlow.html\" title=\"struct maxflow::MaxFlow\">MaxFlow</a>&lt;Cap&gt;",1,["maxflow::MaxFlow"]]],
"maxflow_lower_bound":[["impl&lt;Cap&gt; Freeze for <a class=\"struct\" href=\"maxflow_lower_bound/struct.MaxFlowLowerBound.html\" title=\"struct maxflow_lower_bound::MaxFlowLowerBound\">MaxFlowLowerBound</a>&lt;Cap&gt;<span class=\"where fmt-newline\">where\n    Cap: Freeze,</span>",1,["maxflow_lower_bound::MaxFlowLowerBound"]]],
"mo":[["impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"mo/struct.MoRunner.html\" title=\"struct mo::MoRunner\">MoRunner</a>&lt;'a&gt;",1,["mo::MoRunner"]]],
"modint_mersenne":[["impl Freeze for <a class=\"struct\" href=\"modint_mersenne/struct.ModIntMersenne.html\" title=\"struct modint_mersenne::ModIntMersenne\">ModIntMersenne</a>",1,["modint_mersenne::ModIntMersenne"]]],
"monoid_utils":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"monoid_utils/struct.MaxMonoid.html\" title=\"struct monoid_utils::MaxMonoid\">MaxMonoid</a>&lt;T&gt;",1,["monoid_utils::MaxMonoid"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"monoid_utils/struct.MinMonoid.html\" title=\"struct monoid_utils::MinMonoid\">MinMonoid</a>&lt;T&gt;",1,["monoid_utils::MinMonoid"]]],
"multiset":[["impl&lt;K&gt; Freeze for <a class=\"struct\" href=\"multiset/struct.MultiSet.html\" title=\"struct multiset::MultiSet\">MultiSet</a>&lt;K&gt;",1,["multiset::MultiSet"]]],
"next_permutation":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"next_permutation/struct.Permutations.html\" title=\"struct next_permutation::Permutations\">Permutations</a>&lt;T&gt;",1,["next_permutation::Permutations"]]],
"pcg32":[["impl Freeze for <a class=\"struct\" href=\"pcg32/struct.Pcg32.html\" title=\"struct pcg32::Pcg32\">Pcg32</a>",1,["pcg32::Pcg32"]]],
"potentialized_union_find":[["impl&lt;M&gt; !Freeze for <a class=\"struct\" href=\"potentialized_union_find/struct.PotentializedUnionFind.html\" title=\"struct potentialized_union_find::PotentializedUnionFind\">PotentializedUnionFind</a>&lt;M&gt;",1,["potentialized_union_find::PotentializedUnionFind"]]],
"range_chmin_max_add_sum":[["impl Freeze for <a class=\"struct\" href=\"range_chmin_max_add_sum/struct.RangeChminMaxAddSum.html\" title=\"struct range_chmin_max_add_sum::RangeChminMaxAddSum\">RangeChminMaxAddSum</a>",1,["range_chmin_max_add_sum::RangeChminMaxAddSum"]]],
"raq_rsq":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"raq_rsq/struct.RAQRSQ.html\" title=\"struct raq_rsq::RAQRSQ\">RAQRSQ</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["raq_rsq::RAQRSQ"]]],
"rerooting":[["impl&lt;M, F&gt; Freeze for <a class=\"struct\" href=\"rerooting/struct.Rerooting.html\" title=\"struct rerooting::Rerooting\">Rerooting</a>&lt;M, F&gt;<span class=\"where fmt-newline\">where\n    F: Freeze,</span>",1,["rerooting::Rerooting"]]],
"rolling_hash":[["impl Freeze for <a class=\"struct\" href=\"rolling_hash/struct.RollingHash.html\" title=\"struct rolling_hash::RollingHash\">RollingHash</a>",1,["rolling_hash::RollingHash"]]],
"scc":[["impl Freeze for <a class=\"struct\" href=\"scc/struct.SccGraph.html\" title=\"struct scc::SccGraph\">SccGraph</a>",1,["scc::SccGraph"]]],
"segtree":[["impl&lt;M&gt; Freeze for <a class=\"struct\" href=\"segtree/struct.SegTree.html\" title=\"struct segtree::SegTree\">SegTree</a>&lt;M&gt;",1,["segtree::SegTree"]]],
"segtree_2d_compressed":[["impl&lt;M, T&gt; Freeze for <a class=\"struct\" href=\"segtree_2d_compressed/struct.SegTree2DCompressed.html\" title=\"struct segtree_2d_compressed::SegTree2DCompressed\">SegTree2DCompressed</a>&lt;M, T&gt;",1,["segtree_2d_compressed::SegTree2DCompressed"]]],
"segtree_2d_dense":[["impl&lt;M&gt; Freeze for <a class=\"struct\" href=\"segtree_2d_dense/struct.SegTree2DDense.html\" title=\"struct segtree_2d_dense::SegTree2DDense\">SegTree2DDense</a>&lt;M&gt;",1,["segtree_2d_dense::SegTree2DDense"]]],
"sparse_table":[["impl&lt;M&gt; Freeze for <a class=\"struct\" href=\"sparse_table/struct.SparseTable.html\" title=\"struct sparse_table::SparseTable\">SparseTable</a>&lt;M&gt;",1,["sparse_table::SparseTable"]]],
"sparse_table_on_segtree":[["impl&lt;M&gt; Freeze for <a class=\"struct\" href=\"sparse_table_on_segtree/struct.SparseTableOnSegTree.html\" title=\"struct sparse_table_on_segtree::SparseTableOnSegTree\">SparseTableOnSegTree</a>&lt;M&gt;",1,["sparse_table_on_segtree::SparseTableOnSegTree"]]],
"static_modint":[["impl&lt;const MOD: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.70.0/std/primitive.u32.html\">u32</a>&gt; Freeze for <a class=\"struct\" href=\"static_modint/struct.StaticModInt.html\" title=\"struct static_modint::StaticModInt\">StaticModInt</a>&lt;MOD&gt;",1,["static_modint::StaticModInt"]]],
"top2":[["impl&lt;K, V&gt; Freeze for <a class=\"struct\" href=\"top2/struct.Top2Map.html\" title=\"struct top2::Top2Map\">Top2Map</a>&lt;K, V&gt;<span class=\"where fmt-newline\">where\n    K: Freeze,\n    V: Freeze,</span>",1,["top2::Top2Map"]]],
"union_find":[["impl !Freeze for <a class=\"struct\" href=\"union_find/struct.UnionFind.html\" title=\"struct union_find::UnionFind\">UnionFind</a>",1,["union_find::UnionFind"]]],
"wavelet_matrix":[["impl Freeze for <a class=\"struct\" href=\"wavelet_matrix/struct.WaveletMatrix.html\" title=\"struct wavelet_matrix::WaveletMatrix\">WaveletMatrix</a>",1,["wavelet_matrix::WaveletMatrix"]]],
"wavelet_matrix_cum_sum":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"wavelet_matrix_cum_sum/struct.WaveletMatrixCumSum.html\" title=\"struct wavelet_matrix_cum_sum::WaveletMatrixCumSum\">WaveletMatrixCumSum</a>&lt;T&gt;",1,["wavelet_matrix_cum_sum::WaveletMatrixCumSum"]]],
"wavelet_matrix_segtree":[["impl&lt;M, T&gt; Freeze for <a class=\"struct\" href=\"wavelet_matrix_segtree/struct.WMSegWrapper.html\" title=\"struct wavelet_matrix_segtree::WMSegWrapper\">WMSegWrapper</a>&lt;M, T&gt;",1,["wavelet_matrix_segtree::WMSegWrapper"]]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()