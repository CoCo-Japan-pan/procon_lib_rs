(function() {
    var type_impls = Object.fromEntries([["segtree",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-SegTree%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/segtree/lib.rs.html#11\">Source</a><a href=\"#impl-Clone-for-SegTree%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"algebra/trait.Monoid.html\" title=\"trait algebra::Monoid\">Monoid</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"segtree/struct.SegTree.html\" title=\"struct segtree::SegTree\">SegTree</a>&lt;M&gt;<div class=\"where\">where\n    M::<a class=\"associatedtype\" href=\"algebra/trait.Monoid.html#associatedtype.Target\" title=\"type algebra::Monoid::Target\">Target</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/segtree/lib.rs.html#11\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"segtree/struct.SegTree.html\" title=\"struct segtree::SegTree\">SegTree</a>&lt;M&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","segtree::MinSegTree","segtree::MaxSegTree"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-SegTree%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/segtree/lib.rs.html#11\">Source</a><a href=\"#impl-Debug-for-SegTree%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"algebra/trait.Monoid.html\" title=\"trait algebra::Monoid\">Monoid</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"segtree/struct.SegTree.html\" title=\"struct segtree::SegTree\">SegTree</a>&lt;M&gt;<div class=\"where\">where\n    M::<a class=\"associatedtype\" href=\"algebra/trait.Monoid.html#associatedtype.Target\" title=\"type algebra::Monoid::Target\">Target</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/segtree/lib.rs.html#11\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","segtree::MinSegTree","segtree::MaxSegTree"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26Vec%3C%3CM+as+Monoid%3E::Target%3E%3E-for-SegTree%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/segtree/lib.rs.html#19-37\">Source</a><a href=\"#impl-From%3C%26Vec%3C%3CM+as+Monoid%3E::Target%3E%3E-for-SegTree%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"algebra/trait.Monoid.html\" title=\"trait algebra::Monoid\">Monoid</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;M as <a class=\"trait\" href=\"algebra/trait.Monoid.html\" title=\"trait algebra::Monoid\">Monoid</a>&gt;::<a class=\"associatedtype\" href=\"algebra/trait.Monoid.html#associatedtype.Target\" title=\"type algebra::Monoid::Target\">Target</a>&gt;&gt; for <a class=\"struct\" href=\"segtree/struct.SegTree.html\" title=\"struct segtree::SegTree\">SegTree</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/segtree/lib.rs.html#20-36\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;M::<a class=\"associatedtype\" href=\"algebra/trait.Monoid.html#associatedtype.Target\" title=\"type algebra::Monoid::Target\">Target</a>&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&Vec<<M as Monoid>::Target>>","segtree::MinSegTree","segtree::MaxSegTree"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-SegTree%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/segtree/lib.rs.html#11\">Source</a><a href=\"#impl-PartialEq-for-SegTree%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"algebra/trait.Monoid.html\" title=\"trait algebra::Monoid\">Monoid</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"segtree/struct.SegTree.html\" title=\"struct segtree::SegTree\">SegTree</a>&lt;M&gt;<div class=\"where\">where\n    M::<a class=\"associatedtype\" href=\"algebra/trait.Monoid.html#associatedtype.Target\" title=\"type algebra::Monoid::Target\">Target</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/segtree/lib.rs.html#11\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"segtree/struct.SegTree.html\" title=\"struct segtree::SegTree\">SegTree</a>&lt;M&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/cmp.rs.html#263\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","segtree::MinSegTree","segtree::MaxSegTree"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SegTree%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/segtree/lib.rs.html#39-169\">Source</a><a href=\"#impl-SegTree%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"algebra/trait.Monoid.html\" title=\"trait algebra::Monoid\">Monoid</a>&gt; <a class=\"struct\" href=\"segtree/struct.SegTree.html\" title=\"struct segtree::SegTree\">SegTree</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/segtree/lib.rs.html#40-42\">Source</a><h4 class=\"code-header\">pub fn <a href=\"segtree/struct.SegTree.html#tymethod.new\" class=\"fn\">new</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section><section id=\"method.set\" class=\"method\"><a class=\"src rightside\" href=\"src/segtree/lib.rs.html#44-51\">Source</a><h4 class=\"code-header\">pub fn <a href=\"segtree/struct.SegTree.html#tymethod.set\" class=\"fn\">set</a>(&amp;mut self, p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a>, x: M::<a class=\"associatedtype\" href=\"algebra/trait.Monoid.html#associatedtype.Target\" title=\"type algebra::Monoid::Target\">Target</a>)</h4></section><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/segtree/lib.rs.html#53-56\">Source</a><h4 class=\"code-header\">pub fn <a href=\"segtree/struct.SegTree.html#tymethod.get\" class=\"fn\">get</a>(&amp;self, p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a>) -&gt; M::<a class=\"associatedtype\" href=\"algebra/trait.Monoid.html#associatedtype.Target\" title=\"type algebra::Monoid::Target\">Target</a></h4></section><section id=\"method.prod\" class=\"method\"><a class=\"src rightside\" href=\"src/segtree/lib.rs.html#58-92\">Source</a><h4 class=\"code-header\">pub fn <a href=\"segtree/struct.SegTree.html#tymethod.prod\" class=\"fn\">prod</a>&lt;R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a>&gt;&gt;(&amp;self, range: R) -&gt; M::<a class=\"associatedtype\" href=\"algebra/trait.Monoid.html#associatedtype.Target\" title=\"type algebra::Monoid::Target\">Target</a></h4></section><section id=\"method.all_prod\" class=\"method\"><a class=\"src rightside\" href=\"src/segtree/lib.rs.html#94-96\">Source</a><h4 class=\"code-header\">pub fn <a href=\"segtree/struct.SegTree.html#tymethod.all_prod\" class=\"fn\">all_prod</a>(&amp;self) -&gt; M::<a class=\"associatedtype\" href=\"algebra/trait.Monoid.html#associatedtype.Target\" title=\"type algebra::Monoid::Target\">Target</a></h4></section><section id=\"method.max_right\" class=\"method\"><a class=\"src rightside\" href=\"src/segtree/lib.rs.html#98-132\">Source</a><h4 class=\"code-header\">pub fn <a href=\"segtree/struct.SegTree.html#tymethod.max_right\" class=\"fn\">max_right</a>&lt;F&gt;(&amp;self, l: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a>, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;M::<a class=\"associatedtype\" href=\"algebra/trait.Monoid.html#associatedtype.Target\" title=\"type algebra::Monoid::Target\">Target</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a>,</div></h4></section><section id=\"method.min_left\" class=\"method\"><a class=\"src rightside\" href=\"src/segtree/lib.rs.html#134-168\">Source</a><h4 class=\"code-header\">pub fn <a href=\"segtree/struct.SegTree.html#tymethod.min_left\" class=\"fn\">min_left</a>&lt;F&gt;(&amp;self, r: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a>, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;M::<a class=\"associatedtype\" href=\"algebra/trait.Monoid.html#associatedtype.Target\" title=\"type algebra::Monoid::Target\">Target</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a>,</div></h4></section></div></details>",0,"segtree::MinSegTree","segtree::MaxSegTree"],["<section id=\"impl-Eq-for-SegTree%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/segtree/lib.rs.html#11\">Source</a><a href=\"#impl-Eq-for-SegTree%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"algebra/trait.Monoid.html\" title=\"trait algebra::Monoid\">Monoid</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"segtree/struct.SegTree.html\" title=\"struct segtree::SegTree\">SegTree</a>&lt;M&gt;<div class=\"where\">where\n    M::<a class=\"associatedtype\" href=\"algebra/trait.Monoid.html#associatedtype.Target\" title=\"type algebra::Monoid::Target\">Target</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","segtree::MinSegTree","segtree::MaxSegTree"],["<section id=\"impl-StructuralPartialEq-for-SegTree%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/segtree/lib.rs.html#11\">Source</a><a href=\"#impl-StructuralPartialEq-for-SegTree%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"algebra/trait.Monoid.html\" title=\"trait algebra::Monoid\">Monoid</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"segtree/struct.SegTree.html\" title=\"struct segtree::SegTree\">SegTree</a>&lt;M&gt;</h3></section>","StructuralPartialEq","segtree::MinSegTree","segtree::MaxSegTree"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[16516]}