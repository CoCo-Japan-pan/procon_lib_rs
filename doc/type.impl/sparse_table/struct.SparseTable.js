(function() {
    var type_impls = Object.fromEntries([["sparse_table",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-SparseTable%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sparse_table/lib.rs.html#11\">Source</a><a href=\"#impl-Clone-for-SparseTable%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"algebra/trait.IdempotentMonoid.html\" title=\"trait algebra::IdempotentMonoid\">IdempotentMonoid</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"sparse_table/struct.SparseTable.html\" title=\"struct sparse_table::SparseTable\">SparseTable</a>&lt;M&gt;<div class=\"where\">where\n    M::<a class=\"associatedtype\" href=\"algebra/trait.Monoid.html#associatedtype.Target\" title=\"type algebra::Monoid::Target\">Target</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sparse_table/lib.rs.html#11\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"sparse_table/struct.SparseTable.html\" title=\"struct sparse_table::SparseTable\">SparseTable</a>&lt;M&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","sparse_table::MinSparseTable","sparse_table::MaxSparseTable"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-SparseTable%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sparse_table/lib.rs.html#11\">Source</a><a href=\"#impl-Debug-for-SparseTable%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"algebra/trait.IdempotentMonoid.html\" title=\"trait algebra::IdempotentMonoid\">IdempotentMonoid</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"sparse_table/struct.SparseTable.html\" title=\"struct sparse_table::SparseTable\">SparseTable</a>&lt;M&gt;<div class=\"where\">where\n    M::<a class=\"associatedtype\" href=\"algebra/trait.Monoid.html#associatedtype.Target\" title=\"type algebra::Monoid::Target\">Target</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sparse_table/lib.rs.html#11\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","sparse_table::MinSparseTable","sparse_table::MaxSparseTable"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SparseTable%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sparse_table/lib.rs.html#17-57\">Source</a><a href=\"#impl-SparseTable%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"algebra/trait.IdempotentMonoid.html\" title=\"trait algebra::IdempotentMonoid\">IdempotentMonoid</a>&gt; <a class=\"struct\" href=\"sparse_table/struct.SparseTable.html\" title=\"struct sparse_table::SparseTable\">SparseTable</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/sparse_table/lib.rs.html#19-35\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sparse_table/struct.SparseTable.html#tymethod.new\" class=\"fn\">new</a>(v: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;M::<a class=\"associatedtype\" href=\"algebra/trait.Monoid.html#associatedtype.Target\" title=\"type algebra::Monoid::Target\">Target</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p><code>O(nlogn)</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.prod\" class=\"method\"><a class=\"src rightside\" href=\"src/sparse_table/lib.rs.html#38-56\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sparse_table/struct.SparseTable.html#tymethod.prod\" class=\"fn\">prod</a>&lt;R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a>&gt;&gt;(&amp;self, range: R) -&gt; M::<a class=\"associatedtype\" href=\"algebra/trait.Monoid.html#associatedtype.Target\" title=\"type algebra::Monoid::Target\">Target</a></h4></section></summary><div class=\"docblock\"><p><code>O(1)</code></p>\n</div></details></div></details>",0,"sparse_table::MinSparseTable","sparse_table::MaxSparseTable"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[7205]}