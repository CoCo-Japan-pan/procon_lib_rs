var searchIndex = new Map(JSON.parse('[\
["dual_seg_tree",{"doc":"","t":"H","n":["add"],"q":[[0,"dual_seg_tree"]],"d":[""],"i":[0],"f":"{{bb}b}","c":[],"p":[[1,"usize"]],"b":[]}],\
["modint_mersenne",{"doc":"","t":"KFRNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNN","n":["FromPrimitiveInt","ModIntMersenne","Output","add","add_assign","borrow","borrow_mut","clone","clone_into","div","div_assign","eq","fmt","fmt","from","hash","into","inv","modulus","mul","mul_assign","neg","new","new","new","new","new","new","new","pow","sub","sub_assign","to_owned","to_string","try_from","try_into","type_id","value"],"q":[[0,"modint_mersenne"],[38,"core::fmt"],[39,"core::fmt"],[40,"modint_traits"],[41,"alloc::string"],[42,"core::result"],[43,"core::any"]],"d":["Trait for converting primitive integers to ModInt. impl …","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,17,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,17,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":"```{{bb}b}{{bb}d}{ce{}{}}0{bb}{{ce}d{}{}}43{{bb}f}{{bh}j}0{cc{}}{{bc}dl}65{{}n}986{ceA`{}}{Abb}{nc{}}{Adb}{Afb}{Ahb}{Ajc{}}{{bn}b}{{bb}b}{{bb}d}{ce{}{}}{cAl{}}{c{{An{e}}}{}{}}0{cB`{}}{bn}","c":[],"p":[[5,"ModIntMersenne",0],[1,"unit"],[1,"bool"],[5,"Formatter",38],[8,"Result",38],[10,"Hasher",39],[1,"u64"],[10,"Number",40],[1,"isize"],[1,"i32"],[1,"i64"],[1,"usize"],[1,"u32"],[5,"String",41],[6,"Result",42],[5,"TypeId",43],[10,"FromPrimitiveInt",0]],"b":[[12,"impl-Display-for-ModIntMersenne"],[13,"impl-Debug-for-ModIntMersenne"],[23,"impl-FromPrimitiveInt%3Cisize%3E-for-ModIntMersenne"],[24,"impl-FromPrimitiveInt%3Cu64%3E-for-ModIntMersenne"],[25,"impl-FromPrimitiveInt%3Ci32%3E-for-ModIntMersenne"],[26,"impl-FromPrimitiveInt%3Ci64%3E-for-ModIntMersenne"],[27,"impl-FromPrimitiveInt%3Cusize%3E-for-ModIntMersenne"],[28,"impl-FromPrimitiveInt%3Cu32%3E-for-ModIntMersenne"]]}],\
["modint_traits",{"doc":"","t":"KKKRMMM","n":["FromPrimitiveInt","ModInt","Number","Output","inv","new","pow"],"q":[[0,"modint_traits"]],"d":["Trait for converting primitive integers to ModInt. impl …","","Trait for primitive integer types.","","","",""],"i":[0,0,0,4,1,4,1],"f":"````{bb}{ced{}}{{bf}b}","c":[],"p":[[10,"ModInt",0],[10,"Number",0],[1,"u64"],[10,"FromPrimitiveInt",0]],"b":[]}],\
["rolling_hash",{"doc":"","t":"FNNNNNNNNNNNNNNNN","n":["RollingHash","borrow","borrow_mut","clone","clone_into","eq","fmt","from","get_base_pow","get_hash","get_prefix_hash","into","new","to_owned","try_from","try_into","type_id"],"q":[[0,"rolling_hash"],[17,"core::fmt"],[18,"core::fmt"],[19,"alloc::vec"],[20,"core::result"],[21,"core::any"]],"d":["…","","","","","","","Returns the argument unchanged.","<code>base^i</code>を返す","部分列<code>s[l..r]</code>のhash値を返す <code>O(1)</code>","接頭辞のhash値を返す(<code>get_hash(0, i)</code>と同じ)","Calls <code>U::from(self)</code>.","sのrolling hashを構築 <code>O(|s|)</code>","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":"`{ce{}{}}0{bb}{{ce}d{}{}}{{bb}f}{{bh}j}{cc{}}{{bl}n}{{bll}n}17{{{Ab{A`}}}b}8{c{{Ad{e}}}{}{}}0{cAf{}}","c":[],"p":[[5,"RollingHash",0],[1,"unit"],[1,"bool"],[5,"Formatter",17],[8,"Result",17],[1,"usize"],[5,"ModIntMersenne",18],[1,"char"],[5,"Vec",19],[6,"Result",20],[5,"TypeId",21]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
